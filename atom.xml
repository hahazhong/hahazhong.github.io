<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HaHazhong&amp;Blog</title>
  
  <subtitle>人生苦短，我用Python</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-09-12T09:07:40.889Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>hahazhong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Opencv写代码没有提示</title>
    <link href="http://example.com/2022/09/08/opencv%E6%B2%A1%E6%9C%89%E4%BB%A3%E7%A0%81%E6%8F%90%E7%A4%BA/"/>
    <id>http://example.com/2022/09/08/opencv%E6%B2%A1%E6%9C%89%E4%BB%A3%E7%A0%81%E6%8F%90%E7%A4%BA/</id>
    <published>2022-09-08T13:19:31.000Z</published>
    <updated>2022-09-12T09:07:40.889Z</updated>
    
    <content type="html"><![CDATA[<p>今天在写关于Opencv的代码时，没有代码提示，写入代码后也会出现这样的警告。更新Opencv后也不行。</p><p><img src="https://img-blog.csdnimg.cn/51a96f266fba413ead00ef59c0ba0213.png#pic_center" alt="报错"></p><span id="more"></span> <h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>再找了好多方法后，找到一个最简单的办法。这是再PyCharm上解决的方法</p><ol><li><p>打开设置找到项目里的解释器配置；切换到对应的解释器</p><p><img src="https://img-blog.csdnimg.cn/4e337b4318814c75a7618b96b2fb3a70.png#pic_center" alt="项目"></p></li><li><p>打开全部显示</p><p><img src="https://img-blog.csdnimg.cn/1a82f8f4df8f406aa16b2e4252d1f135.png#pic_center" alt="解释器"></p></li><li><p>打开解释器路径</p><p><img src="https://img-blog.csdnimg.cn/4b39dc008b1f40d6ba3b3f078f18ae74.png#pic_center" alt="路径"></p><p>点击左上角的加号</p><p><img src="https://img-blog.csdnimg.cn/b00d462e25a94de2874e7edf5f6ef540.png#pic_center" alt="解释器路径"></p></li><li><p>选中对应解释器下的模块库里的cv2，我这里是anconda虚拟环境，在envs下的解释器里的Lib下的sit-packages里。</p><p><img src="https://img-blog.csdnimg.cn/f593cb8d93da459eb59165d6ce6b6cee.png#pic_center" alt="cv2"></p></li><li><p>最后一路确定，再重启一下就可以了。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天在写关于Opencv的代码时，没有代码提示，写入代码后也会出现这样的警告。更新Opencv后也不行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/51a96f266fba413ead00ef59c0ba0213.png#pic_center&quot; alt=&quot;报错&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="问题集锦" scheme="http://example.com/categories/%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="报错" scheme="http://example.com/tags/%E6%8A%A5%E9%94%99/"/>
    
    <category term="opencv" scheme="http://example.com/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>python基础(五)--序列</title>
    <link href="http://example.com/2022/09/01/Python%E5%9F%BA%E7%A1%80(%E4%BA%94)%E5%BA%8F%E5%88%97/"/>
    <id>http://example.com/2022/09/01/Python%E5%9F%BA%E7%A1%80(%E4%BA%94)%E5%BA%8F%E5%88%97/</id>
    <published>2022-09-01T13:23:31.000Z</published>
    <updated>2022-09-12T08:47:04.701Z</updated>
    
    <content type="html"><![CDATA[<p>序列是Python中最基本的数据结构。Python中有六个序列的内置类型，分别是列表、元组、字符串、Unicode字符、buffer对象、xrange对象，最常用的是列表和元组。</p><span id="more"></span> <h1 id="列表和列表推导式"><a href="#列表和列表推导式" class="headerlink" title="列表和列表推导式"></a>列表和列表推导式</h1><p>列表就是用逗号(,)分割的一系列数据用方括号([])括起来,逗号分割的数据称为元素,每个元素都有索引,用来记录元素所在位置,索引从0开始。同时列表的元素也可以是列表。</p><h3 id="列表创建与删除"><a href="#列表创建与删除" class="headerlink" title="列表创建与删除"></a>列表创建与删除</h3><ol><li><p>创建</p><p>列表定义格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表名=[元素<span class="number">1</span>,元素<span class="number">2</span>,...]</span><br></pre></td></tr></table></figure><p>空列表定义:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">列表名=[]</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">列表名=<span class="built_in">list</span>()</span><br></pre></td></tr></table></figure><p>例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list1=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">list2=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="number">525</span>]</span><br></pre></td></tr></table></figure></li><li><p>删除</p><ul><li><p>根据索引删除某个元素:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> 列表名[索引]</span><br><span class="line"><span class="comment">#例如:</span></span><br><span class="line">list2=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="number">525</span>]</span><br><span class="line"><span class="keyword">del</span> list2[<span class="number">2</span>]   <span class="comment">#删除列表中第三个元素</span></span><br><span class="line"><span class="built_in">print</span> list2</span><br><span class="line"><span class="comment">#  结果为list2=[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;d&#x27;,525]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>删除列表中某些连续元素格式:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> 列表名[[头下标]:[尾下标]]</span><br><span class="line"><span class="comment">#例如:</span></span><br><span class="line">list2=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="number">525</span>]</span><br><span class="line"><span class="keyword">del</span> list2[<span class="number">2</span>:<span class="number">4</span>]   <span class="comment">#删除列表中第3个到第4个元素</span></span><br><span class="line"><span class="built_in">print</span> list2</span><br><span class="line"><span class="comment">#  结果为list2=[&#x27;a&#x27;,&#x27;b&#x27;,525]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>删除的是从头下标开始,到尾下标结束之前的内容。省略头下标默认是从0开始，省略尾下标则是默认到结尾处的所有元素。</p></li><li><p>删除列表中所有元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> 列表名[[头下标]:[尾下标]]</span><br><span class="line"><span class="comment">#例如:</span></span><br><span class="line">list2=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="number">525</span>]</span><br><span class="line"><span class="keyword">del</span> list2[:]   <span class="comment">#删除列表中所有元素</span></span><br><span class="line"><span class="built_in">print</span> list2</span><br><span class="line"><span class="comment">#  结果为list2=[]</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>列表的<code>+</code>、<code>*</code>、<code>in</code>运算</p><p>列表的<code>+</code>、<code>*</code>运算与字符串相同，+用于组和列表，<code>*</code>同于重复列表.<code>in</code>用于判断某个元素是否在列表中。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]+[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]    <span class="comment"># 结果为[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,1,2,3]</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]*<span class="number">3</span>                <span class="comment"># 结果为[1,2,3,1,2,3,1,2,3]</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]             <span class="comment"># 结果为True</span></span><br></pre></td></tr></table></figure></li><li><p>列表遍历</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 变量 <span class="keyword">in</span> 列表:</span><br><span class="line">    表达式</span><br></pre></td></tr></table></figure><p>例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">    <span class="built_in">print</span>(i,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="comment"># 结果为1 2 3 4 5</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="列表常用方法"><a href="#列表常用方法" class="headerlink" title="列表常用方法"></a>列表常用方法</h3><ol><li><p>相关内置函数</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>len(list)</td><td>返回列表长度(即列表元素个数)</td></tr><tr><td>max(list)</td><td>返回列表中最大的元素</td></tr><tr><td>min(list)</td><td>返回列表中最小的元素</td></tr><tr><td>list(sep)</td><td>将元组、字典、集合、字符串转换为列表</td></tr></tbody></table></li><li><p>列表方法</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>list.append(obj)</td><td>向列表末尾添加对象</td></tr><tr><td>list.count(obj)</td><td>统计某个元素在列表中出现的次数</td></tr><tr><td>list.extend(sep)</td><td>在列表末尾添加另一个序列的值(用新列表扩展原来的列表)</td></tr><tr><td>list.index(obj)</td><td>返回列表中查找某个值第一个匹配项的索引值</td></tr><tr><td>obj&#x3D;list.pop()</td><td>移除列表中的一个值(默认为最后一个),并返回移除的值</td></tr><tr><td>list.remove(obj)</td><td>移除列表中第一个匹配项</td></tr><tr><td>list.reverse()</td><td>将列表翻转</td></tr><tr><td>list.sort()</td><td>对列表进行排序</td></tr><tr><td>list.clear()</td><td>请空列表</td></tr><tr><td>list.copy()</td><td>复制列表</td></tr></tbody></table></li></ol><h3 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h3><p>列表推导式是使用非常简洁的方式来快速生成满足特定需求的列表,代码具有非常强的可读性,运行速度也快.</p><p>格式:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[表达式 <span class="keyword">for</span> 变量 <span class="keyword">in</span> 列表]</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">[表达式 <span class="keyword">for</span> 变量 <span class="keyword">in</span> 列表 <span class="keyword">if</span> 条件]</span><br><span class="line"><span class="comment">#相当于</span></span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> 变量 <span class="keyword">in</span> 列表:</span><br><span class="line">    <span class="keyword">if</span> 条件:</span><br><span class="line">        result.append(表达式)</span><br></pre></td></tr></table></figure><h1 id="元组与生成器推导式"><a href="#元组与生成器推导式" class="headerlink" title="元组与生成器推导式"></a>元组与生成器推导式</h1><p>Python元组与列表类似,不同之处在于元组不能修改。元组的访问速度和处理速度更快，元组是在小括号（）中添加元素。</p><h3 id="元组创建"><a href="#元组创建" class="headerlink" title="元组创建"></a>元组创建</h3><ol><li><p>定义格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">元组名 = (元素<span class="number">1</span>,元素<span class="number">2</span>,...)</span><br><span class="line"><span class="comment"># 例如</span></span><br><span class="line">t1 = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>空元组定义: <code>元组名=()</code>或者<code>元组名=tuple()</code></p><p>如果元组只有一个元素时,需要在元素后添加逗号,否则括号会被当做运算符。</p></li><li><p>元组访问</p><p>跟列表一样使用索引访问。</p></li><li><p>元组的删除</p><p>元组中的元素不能修改，也不能删除。删除操作只能删除整个元组。使用<code>del</code>删除整个元祖.</p></li><li><p>元组的<code>+</code>、<code>*</code>、<code>in</code>运算</p><p>元组的<code>+</code>、<code>*</code>运算与列表相同，+用于组和元组，<code>*</code>同于重复元组.<code>in</code>用于判断某个元素是否在元组中</p></li><li><p>元组遍历</p><p>元组遍历方式与列表一样</p></li><li><p>元组切片</p><p>元组切片除了不能改变元素的值与列表相同</p></li><li><p>元组内置函数</p><p>元组内置函数中<code>tuple()</code>是将其他列表转换成元组,其他与列表相同.</p></li></ol><h3 id="生成器推导式"><a href="#生成器推导式" class="headerlink" title="生成器推导式"></a>生成器推导式</h3><p>生成器推导格式:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(结果 <span class="keyword">for</span> 变量 <span class="keyword">in</span> 可迭代对象 <span class="keyword">if</span> 筛选对象)</span><br></pre></td></tr></table></figure><p>注意:</p><ul><li>生成器推导式可以直接获取成生成器对象,生成器可以直接进行for循环,生成器具有惰性机制</li><li>生成器对象既不是列表也不是元组,如果想要让其变成列表或者对象,需要使用list()或者tuple()函数进行转换</li><li>可以使用_ _next_ _()或者内置函数访问生成器对象,但是当所有元素访问完成,如果需要从新访问元素,必须重新创建生成器</li></ul><h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><p>Python中字典是另一种可变容器模型,而且可以存储任意类型对象。</p><h3 id="字典的创建、添加、修改与删除"><a href="#字典的创建、添加、修改与删除" class="headerlink" title="字典的创建、添加、修改与删除"></a>字典的创建、添加、修改与删除</h3><ol><li><p>创建字典</p><p>格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字典名 = &#123;<span class="string">&#x27;key1&#x27;</span>:<span class="string">&#x27;value1&#x27;</span>,<span class="string">&#x27;key2&#x27;</span>:<span class="string">&#x27;value&#x27;</span>,...&#125;</span><br></pre></td></tr></table></figure><p>字典中的每个元素都是‘键(key)值(value)对’,每个键值对使用<code>:</code>分割,每个元素之间用<code>,</code>分割.</p><p>其中键(key)必须是唯一的,如果重复,最后一个的值会替换前边相同键的值。</p></li><li><p>添加与修改字典元素</p><p>格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字典名[键] = 值</span><br></pre></td></tr></table></figure><p>当前键已经存在会修改字典中该键原有的值,不存在时,会创建新的键值对.</p></li><li><p>删除字典的元素</p><p>格式:</p><ul><li><p>删除某个键值对</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> 字典名[键]</span><br></pre></td></tr></table></figure></li><li><p>清空字典中所有元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字典名.clear()</span><br></pre></td></tr></table></figure></li><li><p>删除字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> 字典名</span><br></pre></td></tr></table></figure></li></ul></li><li><p>内置函数及其方法</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>len(dict)</td><td>返回字典元素的个数,即键的个数</td></tr><tr><td>str(dict)</td><td>输出字典,以可打印的字符串输出</td></tr><tr><td>type(variable)</td><td>返回输入的变量类型</td></tr><tr><td>dict.clear()</td><td>清空字典</td></tr><tr><td>dict.copy()</td><td>复制字典</td></tr><tr><td>dict.fromekey(sep,val)</td><td>以sep中元素为键,val中的元素为值,创建一个新字典</td></tr><tr><td>dict.get(key)</td><td>返回指定键的值,如果键不存在返回None</td></tr><tr><td>dict.items()</td><td>返回字典中的所有键值对</td></tr><tr><td>dict.keys()</td><td>返回字典中的所有键</td></tr><tr><td>dict.update(dict2)</td><td>将dict2合并到dict</td></tr><tr><td>dict.values()</td><td>返回字典中的所有值</td></tr></tbody></table></li></ol><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><p>Python中的集合(set)是一个无序且不重复的序列.</p><h3 id="集合基础知识"><a href="#集合基础知识" class="headerlink" title="集合基础知识"></a>集合基础知识</h3><p>Python的集合也具备数学中集合的特性:确定性、互异性、无序性。</p><p>集合创建格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">集合名 = &#123;value1,value2,...&#125;</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">集合名 = <span class="built_in">set</span>(&#123;value1,value2,...&#125;)</span><br></pre></td></tr></table></figure><p>注意:创建空集合必须用set(),而不是{},因为{}使用来创建空字典的。集合中的元素可以是不同的类型（数字、元组、字符串），但不可以是可变元素（列表，集合，字典）。</p><h3 id="集合操作与运算"><a href="#集合操作与运算" class="headerlink" title="集合操作与运算"></a>集合操作与运算</h3><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>len(s)</td><td>返回集合元素个数</td></tr><tr><td>str(s)</td><td>输出集合以字符串表示</td></tr><tr><td>set(value)</td><td>生成可变的集合</td></tr><tr><td>frozenset(value)</td><td>生成不可变集合</td></tr><tr><td>s.copy()</td><td>复制集合</td></tr><tr><td>s.update(t)</td><td>将t中的元素添加到s</td></tr><tr><td>s.add(obj)</td><td>将obj添加到集合s</td></tr><tr><td>s.remove(obj)</td><td>将obj从集合s中删除,如果obj不存在一发异常</td></tr><tr><td>s.discard(obj)</td><td>将obj从集合s中删除,如果obj不存在不影响</td></tr><tr><td>s.pop()</td><td>删除并返回一个不确定元素</td></tr><tr><td>s.clear()</td><td>清空集合</td></tr></tbody></table><h3 id="序列间的区别"><a href="#序列间的区别" class="headerlink" title="序列间的区别"></a>序列间的区别</h3><table><thead><tr><th>特征\类别</th><th>列表</th><th>元组</th><th>字典</th><th>集合</th></tr></thead><tbody><tr><td>英文</td><td>list</td><td>tuple</td><td>dict</td><td>set</td></tr><tr><td>可读</td><td>读写</td><td>只可读</td><td>读写</td><td>读写</td></tr><tr><td>是否重复</td><td>是</td><td>是</td><td>是(键不可重复)</td><td>否</td></tr><tr><td>存储</td><td>值</td><td>值</td><td>键值对</td><td>键(不可重复)</td></tr><tr><td>是否有序</td><td>有序</td><td>有序</td><td>无序</td><td>无序</td></tr><tr><td>添加</td><td>append()</td><td>不能添加</td><td>d[key]&#x3D;value</td><td>add()</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;序列是Python中最基本的数据结构。Python中有六个序列的内置类型，分别是列表、元组、字符串、Unicode字符、buffer对象、xrange对象，最常用的是列表和元组。&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="基础" scheme="http://example.com/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="序列" scheme="http://example.com/tags/%E5%BA%8F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>python基础(四)--程序控制结构</title>
    <link href="http://example.com/2022/09/01/Python%E5%9F%BA%E7%A1%80(%E5%9B%9B)%E7%A8%8B%E5%BA%8F%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/"/>
    <id>http://example.com/2022/09/01/Python%E5%9F%BA%E7%A1%80(%E5%9B%9B)%E7%A8%8B%E5%BA%8F%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/</id>
    <published>2022-09-01T13:23:31.000Z</published>
    <updated>2022-09-01T13:03:22.656Z</updated>
    
    <content type="html"><![CDATA[<p>Python语言也是结构化程序设计语言,其基本程序结构有三种:顺序结构、选择结构（分支结构）、循环结构。</p><ul><li>循环结构：即程序从上至下逐条语句执行。</li><li>选择结构：指程序在运行过程中根据条件有选择的执行一些语句。</li><li>循环结构：是为解决一些实际问题中具有规律性的重复操作的工作，为反复执行某些语句而设置的一种程序结构。</li></ul><span id="more"></span>  <h1 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h1><p>Python中的三元运算符,即条件表达式,其语法如下:</p><p><code>表达式 if 表达式2 else 表达式3</code></p><p>其中表达式2结果为True(非0)或者Flase(0),为True(非0)时,整个条件表达式的值为表达式1的值,为False时整个条件表达式的值为表达式2的值。</p><p>例：输入3个整数，输出3个数最大的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入一个整数:&#x27;</span>))</span><br><span class="line">b = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入一个整数:&#x27;</span>))</span><br><span class="line">c = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入一个整数:&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">max</span> = (a <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> b) <span class="keyword">if</span> (a <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> b) &gt; c <span class="keyword">else</span> c</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;a&#125;</span>,<span class="subst">&#123;b&#125;</span>,<span class="subst">&#123;c&#125;</span>中最大的数为<span class="subst">&#123;<span class="built_in">max</span>&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h1><p>用if语句可以构成选择结构。他根据条件进行判断，以决定执行某个分支程序段。if语句有三种形式，分别是if形式，if…else…形式,if…elif…else形式。</p><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><p>if语句形式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 表达式:</span><br><span class="line">语句块</span><br></pre></td></tr></table></figure><p>如果表达式的值为真(或非0),则执行语句块,否则不执行该语句块。</p><p>例:输入一个整数,判断该整数是否在1~100内。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入整数:&#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> <span class="number">1</span> &lt;= n &lt;= <span class="number">100</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;n&#125;</span>是在1到100的整数&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>if后的表达式可以是任意合法的表达式;</li><li>若if只控制一条语句,则语句可以与if同一行;</li><li>若if控制多条语句,则要把这组语句同一缩进。</li></ul><h2 id="if…else语句"><a href="#if…else语句" class="headerlink" title="if…else语句"></a>if…else语句</h2><p>if…else语句形式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 表达式:</span><br><span class="line">语句块</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">语句块</span><br></pre></td></tr></table></figure><ul><li>只有if后有表达式,else后没有表达式,只有受其控制的语句块</li></ul><h2 id="if…elif…else语句"><a href="#if…elif…else语句" class="headerlink" title="if…elif…else语句"></a>if…elif…else语句</h2><p>if…elif…else语句形式:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 表达式:</span><br><span class="line">语句块</span><br><span class="line"><span class="keyword">elif</span> 表达式<span class="number">1</span>:</span><br><span class="line">语句块<span class="number">1</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">elif</span>  表达式n:</span><br><span class="line">    语句块n</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">语句块</span><br></pre></td></tr></table></figure><ul><li>依次判断表达式的值,如果某个表达式为真,则执行对应语句块,然后跳出if语句之外执行程序。</li></ul><h2 id="选择结构嵌套"><a href="#选择结构嵌套" class="headerlink" title="选择结构嵌套"></a>选择结构嵌套</h2><p>选择结构的嵌套是指在if或else分支语句中又包含了if语句或if…else或if…elif…else语句。分为内层语句和外层语句。</p><p>语句格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 表达式<span class="number">1</span>:</span><br><span class="line"><span class="keyword">if</span> 表达式<span class="number">2</span>:</span><br><span class="line">语句块<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">语句块<span class="number">2</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">语句块<span class="number">3</span></span><br></pre></td></tr></table></figure><h1 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h1><p>循环结构是为了当程序再一次运行中，其中某些语句需要被反复执行多次，又称为重复结构。</p><h2 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h2><p>多用于语句的循环次数未知的程序中，格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 表达式:</span><br><span class="line">    循环语句组</span><br><span class="line">[<span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">else</span>语句体]</span><br></pre></td></tr></table></figure><h2 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h2><p>是程序实现循环结构的常用语句之一，尤其处理已知语句的循环次数的程序中应用较多，一般用循环变量依次取出序列中的元素而实现的控制。格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 循环变量 <span class="keyword">in</span> 序列:</span><br><span class="line">    循环体语句组</span><br><span class="line">[<span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">else</span>语句组]</span><br></pre></td></tr></table></figure><h2 id="continue和break语句"><a href="#continue和break语句" class="headerlink" title="continue和break语句"></a>continue和break语句</h2><p>在循环语句中,如果想要在循环条件仍然满足的情况下提前退出循环语句使用<code>break</code>语句，如果想要结束某次循环进入下一轮而不是完全退出循环语句时，可使用<code>continue</code>语句实现。</p><p><code>pass</code>语句是空语句,是为了保证程序结构的完整性,可以放在任何结构或函数中。pass不做任何事请，一般用作站位语句。</p><h2 id="循环嵌套"><a href="#循环嵌套" class="headerlink" title="循环嵌套"></a>循环嵌套</h2><p>循环结构和分支结构一样也可以进行嵌套，就是把一个完整的循环体系嵌入另一个循环体中。</p><p>&#x3D;&#x3D;正常情况下：应先执行内层的循环体操作，然后是外层循环。例如：对于双重循环，内层循环执行次数为：内层次数*外层循环。&#x3D;&#x3D;</p><p>&#x3D;&#x3D;各种循环可以互相嵌套，自由组合。但是各循环必须完整包含，相互间绝对不允许有交叉现象。&#x3D;&#x3D;</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Python语言也是结构化程序设计语言,其基本程序结构有三种:顺序结构、选择结构（分支结构）、循环结构。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;循环结构：即程序从上至下逐条语句执行。&lt;/li&gt;
&lt;li&gt;选择结构：指程序在运行过程中根据条件有选择的执行一些语句。&lt;/li&gt;
&lt;li&gt;循环结构：是为解决一些实际问题中具有规律性的重复操作的工作，为反复执行某些语句而设置的一种程序结构。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="基础" scheme="http://example.com/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="程序控制结构" scheme="http://example.com/tags/%E7%A8%8B%E5%BA%8F%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>python基础(三)--变量与运算符</title>
    <link href="http://example.com/2022/08/26/python%E5%9F%BA%E7%A1%80(%E4%B8%89)%E5%B8%B8%E9%87%8F%E5%8F%98%E9%87%8F%E8%BF%90%E7%AE%97%E7%AC%A6%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://example.com/2022/08/26/python%E5%9F%BA%E7%A1%80(%E4%B8%89)%E5%B8%B8%E9%87%8F%E5%8F%98%E9%87%8F%E8%BF%90%E7%AE%97%E7%AC%A6%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2022-08-26T13:23:31.000Z</published>
    <updated>2022-08-27T05:47:07.878Z</updated>
    
    <content type="html"><![CDATA[<p>在程序中用到的数据通常是用变量、常量或将这些常量或变量用某些运算符连接起来形成的表达式来体现。</p><span id="more"></span><h1 id="常量与变量"><a href="#常量与变量" class="headerlink" title="常量与变量"></a>常量与变量</h1><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>标识符是在程序中有特定含义的一组字符，比如类名、对象名、属性名、函数名等。</p><p>在Python中，标识符命名规则如下：</p><ul><li><p>长度无限制。</p></li><li><p>标识符不能使用Python中的关键字(保留字).</p></li><li><p>字母大小写敏感.</p></li><li><p>标识符可以由字母、下划线以及Unicode编码中的非英文字母开头，后面的字符可以是上述任意字符也可以是数字。</p></li></ul><p>Python3关键字：</p><table><thead><tr><th align="center">False</th><th align="center">class</th><th align="center">from</th><th align="center">or</th><th align="center">and</th><th align="center">None</th></tr></thead><tbody><tr><td align="center">continue</td><td align="center">pass</td><td align="center">True</td><td align="center">def</td><td align="center">finally</td><td align="center">raise</td></tr><tr><td align="center">global</td><td align="center">try</td><td align="center">import</td><td align="center">return</td><td align="center">with</td><td align="center">await</td></tr><tr><td align="center">in</td><td align="center">except</td><td align="center">assert</td><td align="center">else</td><td align="center">for</td><td align="center">not</td></tr><tr><td align="center">async</td><td align="center">yield</td><td align="center">lambda</td><td align="center">if</td><td align="center">as</td><td align="center">while</td></tr><tr><td align="center">nonlocal</td><td align="center">del</td><td align="center">break</td><td align="center">elif</td><td align="center">is</td><td align="center"></td></tr></tbody></table><p>一般标识符命名规定约定：</p><ul><li>小驼峰式命名法，如：userName。</li><li>大驼峰式命名法，如：UserName。</li><li>下划线连接法，如：user_name。</li><li>不要使用内置的类名，函数名，以及内置的异常名。</li><li>不要在名字开头结尾都用下划线。</li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>在Python中，将一个值或对象用一个赋值运算符（&#x3D;）赋值给一个标识符，则该标识符即为变量的名字，需要时可对变量名重新复制。Python不需要先声明变量为某种类型，可直接使用。</p><p>变量赋值：</p><ul><li>单个变量赋值：标识符&#x3D;值</li><li>多变量赋同一个值：标识符1&#x3D;标识符2&#x3D;值</li><li>多个变量赋不同值：标识符1，标识符2&#x3D;值1，值2</li></ul><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&#x27;哈哈钟&#x27;</span></span><br><span class="line">age  = <span class="number">21</span></span><br><span class="line">width = <span class="number">65.3</span></span><br><span class="line"><span class="built_in">print</span>(name,age,width)</span><br><span class="line"><span class="comment"># 也可以这样赋值</span></span><br><span class="line">name , age , width = <span class="string">&#x27;哈哈钟&#x27;</span> , <span class="number">21</span> , <span class="number">65.3</span></span><br><span class="line"><span class="built_in">print</span>(name,age,width)</span><br></pre></td></tr></table></figure><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>在Python中,一个字面意义上的常量的例子是如同0、2、3.14、6.57e-3这样的数，或者字符串或者布尔值。这些数据在程序中按字面意思的值进行处理，这些值通常情况不能改变，所以这些被称为字面意义上的常量。通常把标识符大写当最常量使用。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PI = <span class="number">3.1415926</span></span><br></pre></td></tr></table></figure><h1 id="运算符与表达式"><a href="#运算符与表达式" class="headerlink" title="运算符与表达式"></a>运算符与表达式</h1><p>一个表达式分为运算符和操作数，如1+2,+就是运算符，1和2就是操作数。在Python中表达式可以作为语句，但是表达式结果存储需要借助变量。</p><h3 id="常用运算符"><a href="#常用运算符" class="headerlink" title="常用运算符"></a>常用运算符</h3><table><thead><tr><th>运算符</th><th>名称</th><th>举例</th></tr></thead><tbody><tr><td>&#x3D;</td><td>简单赋值</td><td>c &#x3D;a + b将a + b的值赋给c</td></tr><tr><td>+&#x3D;</td><td>加法赋值</td><td>c +&#x3D; a相当于c &#x3D; c + a</td></tr><tr><td>-&#x3D;</td><td>减法赋值</td><td>c -&#x3D; a相当于c &#x3D; c - a</td></tr><tr><td>*&#x3D;</td><td>乘法赋值</td><td>c *&#x3D; a相当于c &#x3D; c  * a</td></tr><tr><td>%&#x3D;</td><td>取余赋值</td><td>c %&#x3D; a相当于c &#x3D; c % a</td></tr><tr><td>&#x2F;&#x3D;</td><td>除法赋值</td><td>c &#x2F;&#x3D; a相当于c &#x3D; c &#x2F; a</td></tr><tr><td>**&#x3D;</td><td>幂赋值</td><td>c * * &#x3D; a相当于c&#x3D;c  * * a</td></tr><tr><td>&#x2F;&#x2F;&#x3D;</td><td>取整赋值</td><td>c &#x2F;&#x2F;&#x3D; a相当于c &#x3D; c &#x2F;&#x2F; a</td></tr><tr><td>+</td><td>加</td><td>3 + 5得到8，’a’+’b’得到’ab’</td></tr><tr><td>-</td><td>减</td><td>-2.5得到负数，50-24得到26</td></tr><tr><td>*</td><td>乘</td><td>2 * 3得到3，’ha’ * 3得到’hahaha’</td></tr><tr><td>**</td><td>幂</td><td>3 ** 2 得到9</td></tr><tr><td>&#x2F;</td><td>除</td><td>4&#x2F;3得到1(整数除法得到整数)，4.0&#x2F;3或4&#x2F;3.0得到1.333333333</td></tr><tr><td>&#x2F;&#x2F;</td><td>整除</td><td>4 &#x2F;&#x2F; 3.0 得到1.0</td></tr><tr><td>%</td><td>取余</td><td>4%3得到1，4.0%3得到1.0</td></tr><tr><td>&lt;</td><td>小于</td><td>3&lt;5返回True，5&lt;3返回False</td></tr><tr><td>&gt;</td><td>大于</td><td>5&gt;3返回True，3&gt;5返回False</td></tr><tr><td>&#x3D;&#x3D;</td><td>等于</td><td>2 &#x3D;&#x3D; 2返回True,，str’ &#x3D;&#x3D; ‘Str’返回False，’str’ &#x3D;&#x3D; ‘str’返回True</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td><td>2 &gt;&#x3D; 2返回True，1 &gt;&#x3D; 2返回False</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td><td>2 &lt;&#x3D; 2返回True，4 &lt;&#x3D; 2返回False</td></tr><tr><td>!&#x3D;</td><td>不等于</td><td>‘str’ !&#x3D; ‘Str返回True，2 !&#x3D; 2返回False</td></tr><tr><td>not</td><td>布尔‘非’</td><td>not True返回False</td></tr><tr><td>and</td><td>布尔‘与’</td><td>True and False返回False</td></tr><tr><td>or</td><td>布尔‘或’</td><td>True or False返回True</td></tr></tbody></table><h3 id="运算符优先级-由高到低"><a href="#运算符优先级-由高到低" class="headerlink" title="运算符优先级(由高到低)"></a>运算符优先级(由高到低)</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>f()</td><td>函数调用</td></tr><tr><td>x[index:index]</td><td>切片</td></tr><tr><td>x[index]</td><td>索引</td></tr><tr><td>x.attribute</td><td>属性</td></tr><tr><td>**</td><td>幂</td></tr><tr><td>~x</td><td>按位翻转</td></tr><tr><td>+x 、-x</td><td>正负号</td></tr><tr><td>*、&#x2F;、%、&#x2F;&#x2F;</td><td>乘除、取余、取整</td></tr><tr><td>+、-</td><td>加、减</td></tr><tr><td>&lt;&lt;、&gt;&gt;</td><td>移位</td></tr><tr><td>&amp;</td><td>按位与</td></tr><tr><td>^</td><td>按位异或</td></tr><tr><td>|</td><td>按位或</td></tr><tr><td>&lt;、&lt;&#x3D;、&#x3D;&#x3D;、&gt;&#x3D;、&gt;、!&#x3D;</td><td>比较</td></tr><tr><td>&#x3D;、%&#x3D;、&#x2F;&#x3D;、&#x2F;&#x2F;&#x3D;、-&#x3D;、+&#x3D;、*&#x3D; 、**&#x3D;</td><td>赋值</td></tr><tr><td>is 、is not</td><td>同一性测试</td></tr><tr><td>in 、not in</td><td>成员测试</td></tr><tr><td>not x</td><td>布尔‘非’</td></tr><tr><td>and</td><td>布尔‘与’</td></tr><tr><td>or</td><td>or</td></tr><tr><td>lambda</td><td>Lambda表达式</td></tr></tbody></table><h3 id="常用内置函数"><a href="#常用内置函数" class="headerlink" title="常用内置函数"></a>常用内置函数</h3><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>range([start],stop[,step])</td><td>产生一个序列，默认从0开始，含头不含尾，step为分隔符</td></tr><tr><td>round(x[,n])</td><td>四舍五入</td></tr><tr><td>sum()</td><td>求和</td></tr><tr><td>max()</td><td>求最大值</td></tr><tr><td>min()</td><td>求最小值</td></tr><tr><td>sorted(iterable[cmp[,key[,reverse]]])</td><td>进行排序</td></tr><tr><td>len()</td><td>返回集合长度</td></tr><tr><td>map(function,iterable,…)</td><td>遍历每个元素，执行function函数</td></tr><tr><td>type(object)</td><td>返回对象类型</td></tr><tr><td>pow(x,y)</td><td>返回x的y次幂</td></tr><tr><td>oct(x)</td><td>转换为八进制</td></tr><tr><td>hex(x)</td><td>转换为十六进制</td></tr><tr><td>chr(x)</td><td>转换为对应的ASCII字符</td></tr><tr><td>bin(x)</td><td>转换为二进制</td></tr><tr><td>filter(function,iterable)</td><td>构造一个序列</td></tr><tr><td>iter(o[,sentine])</td><td>生成一个对象的迭代器，第二个参数为分隔符</td></tr><tr><td>zip([iterable,…])</td><td>用于将可迭代对象的元素打包成一个个元组，然后返回这些元组的列表</td></tr><tr><td>open(name[,mode[,buffering]])</td><td>打开文件，name为文件名称，mode为打开权限，buffering表示是否缓冲</td></tr><tr><td>print()</td><td>输出</td></tr><tr><td>input()</td><td>输入</td></tr><tr><td>format()</td><td>格式化输出（在Python基础（一）中具体讲解）</td></tr><tr><td>类型转换、创建函数</td><td>在Python基础（二）中有具体讲解</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;在程序中用到的数据通常是用变量、常量或将这些常量或变量用某些运算符连接起来形成的表达式来体现。&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="基础" scheme="http://example.com/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="变量与运算" scheme="http://example.com/tags/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>python基础(二)--数据类型</title>
    <link href="http://example.com/2022/08/20/python%E5%9F%BA%E7%A1%80(%E4%BA%8C)%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://example.com/2022/08/20/python%E5%9F%BA%E7%A1%80(%E4%BA%8C)%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2022-08-20T13:19:31.000Z</published>
    <updated>2022-08-20T10:33:45.371Z</updated>
    
    <content type="html"><![CDATA[<p>python3的标准数据类型有Number(数字)、String(字符串)、List(列表)、Tuple(元组)、Set(集合)、Dictionary(字典)。</p><span id="more"></span><h1 id="一、数值类型"><a href="#一、数值类型" class="headerlink" title="一、数值类型"></a>一、数值类型</h1><p>python中数值类型有四种：int(整形)、float(浮点型)、bool(布尔型)、complex(复数型)</p><ul><li>int: 只有一种长整型整数. 如:a&#x3D;23</li><li>float: 小数 如: b&#x3D;23.23</li><li>bool: 布尔型的值只有True和False两个关键字,True的值为1,false的值为0.如:c&#x3D;True</li><li>complex: 存放的是一对浮点数,一个实数和一个虚数表示复数.如:d&#x3D;2.5+i</li></ul><h1 id="二、字符串"><a href="#二、字符串" class="headerlink" title="二、字符串"></a>二、字符串</h1><p>python中字符串用单引号(‘)、双引号(“)、三引号(‘’’或”””)括起来,也可以使用反斜杠\转义特殊字符串。</p><h3 id="1-字符串截取（切片）"><a href="#1-字符串截取（切片）" class="headerlink" title="1.字符串截取（切片）"></a>1.字符串截取（切片）</h3><p>语法格式： <code>变量[头下标:尾下标[:间隔数]]</code><br>表示截取字符串从头下标(包括头下标字符)开始到尾下标之前(不包括尾下标的字符)的字符.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&#x27;hahazhong&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 输出字符串--&gt;hahazhong</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>])  <span class="comment"># 输出字符串中第一个字符--&gt;h</span></span><br><span class="line"><span class="built_in">print</span>(a[-<span class="number">1</span>])  <span class="comment"># 输出字符串中最后一个字符--&gt;g</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">1</span>:-<span class="number">1</span>])  <span class="comment"># 输出字符串中第二个字符到倒数第二个的字符--&gt;ahazhon</span></span><br><span class="line"><span class="built_in">print</span>(a[:-<span class="number">1</span>])  <span class="comment"># 输出字符串第一个到倒数倒数第二个字符--&gt;hahazhon</span></span><br><span class="line"><span class="built_in">print</span>(a[::-<span class="number">1</span>])  <span class="comment"># 逆向截取字符串--&gt;gnohzahah</span></span><br><span class="line"><span class="built_in">print</span>(a[::<span class="number">2</span>])  <span class="comment"># 输出奇数位的字符串,从左到右每次间隔1个字符取字符--&gt;hhzog</span></span><br></pre></td></tr></table></figure><h3 id="2-字符串更新"><a href="#2-字符串更新" class="headerlink" title="2.字符串更新"></a>2.字符串更新</h3><p>在python中字符串是不可变类型,无法直接改变字符串某一位字符.如果要改变字符串的元素需要对字符串重新复制.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将字符串hahazhong改为Hahazhong:</span></span><br><span class="line">a = <span class="string">&#x27;hahazhong&#x27;</span></span><br><span class="line">a = <span class="string">&#x27;H&#x27;</span> + a[<span class="number">1</span>:]</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># --&gt;Hahazhong</span></span><br><span class="line">a = a.replace(<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;H&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 将所有的&#x27;h&#x27;换为&#x27;H&#x27;--&gt;HaHazHong</span></span><br></pre></td></tr></table></figure><h3 id="3-转义字符"><a href="#3-转义字符" class="headerlink" title="3.转义字符"></a>3.转义字符</h3><table><thead><tr><th align="center">转义字符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">\</td><td align="center">续行符</td></tr><tr><td align="center">\</td><td align="center">反斜杠</td></tr><tr><td align="center">&#39;</td><td align="center">单引号</td></tr><tr><td align="center">&quot;</td><td align="center">双引号</td></tr><tr><td align="center">\a</td><td align="center">响铃</td></tr><tr><td align="center">\b</td><td align="center">退格</td></tr><tr><td align="center">\e</td><td align="center">转义</td></tr><tr><td align="center">\000</td><td align="center">空</td></tr><tr><td align="center">\n</td><td align="center">换行符</td></tr><tr><td align="center">\v</td><td align="center">纵向制表符</td></tr><tr><td align="center">\t</td><td align="center">横向制表符</td></tr><tr><td align="center">\r</td><td align="center">回车</td></tr><tr><td align="center">\f</td><td align="center">换页</td></tr><tr><td align="center">\yyy</td><td align="center">八进制数yyy代表的字符</td></tr><tr><td align="center">\xyy</td><td align="center">十六进制yy代表的字符</td></tr><tr><td align="center">\other</td><td align="center">其他字符以普通格式输出</td></tr></tbody></table><h3 id="4-常用函数"><a href="#4-常用函数" class="headerlink" title="4.常用函数"></a>4.常用函数</h3><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">capitalize()</td><td align="left">将字符串第一个字符转换为大写</td></tr><tr><td align="left">find(str,beg&#x3D;0,end&#x3D;len(string)</td><td align="left">检测str是否在字符串中,,beg和end指定检测范围,如果存在返回索引,不存在则返回-1</td></tr><tr><td align="left">len(string)</td><td align="left">返回字符串的长度</td></tr><tr><td align="left">join(seq)</td><td align="left">以指定字符串为分隔符,将seq中所有元素合并为一个新字符串</td></tr><tr><td align="left">lower()</td><td align="left">将字符串中的大写字符替换为小写</td></tr><tr><td align="left">upper()</td><td align="left">将字符串中的小写字符替换为大写</td></tr><tr><td align="left">lstrip()</td><td align="left">截掉字符串左边的空格</td></tr><tr><td align="left">rstrip()</td><td align="left">删除字符串右边的空格</td></tr><tr><td align="left">strip([string])</td><td align="left">在字符串上执行lstrip()和rstrip()函数</td></tr><tr><td align="left">max(str)</td><td align="left">返回str中最大的字母</td></tr><tr><td align="left">min(str)</td><td align="left">返回str中最小的字母</td></tr><tr><td align="left">replace(old,new[,max])</td><td align="left">将字符串中的某一个元素替换成新元素,如果指定max,则替换不超过max</td></tr><tr><td align="left">zfill(width)</td><td align="left">返回长度为width的字符串,源字符串右对齐,前面填充0</td></tr></tbody></table><h1 id="三、布尔类型"><a href="#三、布尔类型" class="headerlink" title="三、布尔类型"></a>三、布尔类型</h1><p>python中bool类型可以和数值类型进行混合运算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="literal">True</span> + <span class="number">5</span>)  <span class="comment"># --&gt;6</span></span><br><span class="line"><span class="built_in">print</span>(<span class="literal">False</span> + <span class="number">2</span>)  <span class="comment"># --&gt;2</span></span><br></pre></td></tr></table></figure><h1 id="四、空值None"><a href="#四、空值None" class="headerlink" title="四、空值None"></a>四、空值None</h1><p>在python中None是一个特殊的常量.None有自己的类型NoneType,None主要判断对象是否为空值.<br>None和False不同,None不是0;不是空字符串;None和其他数据类型比较永远返回False;可以将None赋值给任意变量,但是无法创建其他的NoneType对象.  </p><h1 id="五、数据类型转换"><a href="#五、数据类型转换" class="headerlink" title="五、数据类型转换"></a>五、数据类型转换</h1><p>使用内置函数对数据类型进行转换:</p><table><thead><tr><th align="left">函数格式</th><th align="left">示例</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">int(x[,base])</td><td align="left">int(‘8.5’)将字符串’8.5’转换为8<br/>int(‘12345’,8)将八进制12345转换为十进制5349</td><td align="left">将数字类型转换为整数类型</td></tr><tr><td align="left">float(x)</td><td align="left">float(1)–&gt;1.0<br/>float(‘1’)–&gt;1.0</td><td align="left">转换为浮点数,不足的位数用0补齐</td></tr><tr><td align="left">complex(real,imag)</td><td align="left">complex(‘1’)<br/>complex(1,2)</td><td align="left">转换为复数,第一个参数可以为string类型和数字类型,第二个只能为数字,默认为0</td></tr><tr><td align="left">str(x)</td><td align="left">str(1)</td><td align="left">转化为字符串</td></tr><tr><td align="left">repr(x)</td><td align="left">repr(Object)</td><td align="left">返回一个对象的String类型</td></tr><tr><td align="left">eval(str)</td><td align="left">eavl(‘12+13’)</td><td align="left">执行字符串表达式,并返回结果</td></tr><tr><td align="left">list(s)</td><td align="left">list((1,2,3,4))</td><td align="left">将序列转化为列表</td></tr><tr><td align="left">tuple(sep)</td><td align="left">tuple([1,2,3,4])</td><td align="left">将序列转换为元组</td></tr><tr><td align="left">set(s)</td><td align="left">set((1,2,3,4,5,4,5))</td><td align="left">将一个可迭代对象转换为集合,并且去重复,返回结果</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;python3的标准数据类型有Number(数字)、String(字符串)、List(列表)、Tuple(元组)、Set(集合)、Dictionary(字典)。&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="基础" scheme="http://example.com/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="数据类型" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>python基础(一)--标准输入输出</title>
    <link href="http://example.com/2022/08/17/python%E5%9F%BA%E7%A1%80(%E4%B8%80)%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/"/>
    <id>http://example.com/2022/08/17/python%E5%9F%BA%E7%A1%80(%E4%B8%80)%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</id>
    <published>2022-08-17T13:19:31.000Z</published>
    <updated>2022-08-17T14:29:09.575Z</updated>
    
    <content type="html"><![CDATA[<h1 id="标准输入"><a href="#标准输入" class="headerlink" title="标准输入"></a>标准输入</h1><p><code>input()</code>函数被称为格式输入语言,即按照用户指定的格式从键盘把数据输入到指定变量中</p><span id="more"></span><p>例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="built_in">input</span>(<span class="string">&#x27;请输入年龄:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(x)<span class="comment">#--&gt;请输入年龄:88</span></span><br><span class="line">        <span class="comment">#   88</span></span><br></pre></td></tr></table></figure><p>也可以使用<code>eavl()</code>函数和<code>input()</code>函数结合,实现一次性接受多个数据,给多个变量赋值。并且会把数据转换成对应的格式.<br>例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name, age = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入姓名,年龄:&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(name,age)<span class="comment">#--&gt;请输入姓名,年龄:&#x27;张三&#x27;,88</span></span><br><span class="line">               <span class="comment">#   张三 88</span></span><br></pre></td></tr></table></figure><h1 id="标准输出函数"><a href="#标准输出函数" class="headerlink" title="标准输出函数"></a>标准输出函数</h1><p><code>print()</code>函数可以向控制台输出一个或者多个字符.<br>例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>([表达式<span class="number">1</span>,表达式<span class="number">2</span>,...,表达式n],[sep=分隔符],[end=结束符])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, sep=<span class="string">&#x27;.&#x27;</span>, end=<span class="string">&#x27;。&#x27;</span>)  <span class="comment">#--&gt;a.b。</span></span><br></pre></td></tr></table></figure><h1 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h1><h3 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h3><p><code>格式化字符串%(表达式,...,表达式n)</code></p><ol><li><code>%[[+/-]n]c</code>:输出ASCII字符.等价于<code>chr()</code>函数.长度为n位(n小于实际长度时,按实际长度输出),+表示右对齐(默认,可省略),-(左对齐).<br>例:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%c&#x27;</span>%<span class="string">&#x27;A&#x27;</span>)  <span class="comment">#--&gt; A</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%c%c%c&#x27;</span> % (<span class="string">&#x27;A&#x27;</span>, <span class="number">66</span>, <span class="literal">True</span>+<span class="number">66</span>))  <span class="comment">#--&gt;ABC</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%c%c%+6c&#x27;</span> % (<span class="string">&#x27;A&#x27;</span>, <span class="number">66</span>, <span class="literal">True</span>+<span class="number">66</span>))  <span class="comment">#--&gt;AB     C</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%6c%c%c&#x27;</span> % (<span class="string">&#x27;A&#x27;</span>, <span class="number">66</span>, <span class="literal">True</span>+<span class="number">66</span>))  <span class="comment">#--&gt;     ABC</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%c%-6c%c&#x27;</span> % (<span class="string">&#x27;A&#x27;</span>, <span class="number">66</span>, <span class="literal">True</span>+<span class="number">66</span>))  <span class="comment">#--&gt;AB     C</span></span><br></pre></td></tr></table></figure></li><li><code>%%</code>:输出%<br>例:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%c%%%c%%%c&#x27;</span> % (<span class="string">&#x27;A&#x27;</span>, <span class="number">66</span>, <span class="literal">True</span>+<span class="number">66</span>))  <span class="comment">#--&gt;A%B%C</span></span><br></pre></td></tr></table></figure></li><li><code>%[[+/-]n]s</code>:输出字符串,等价于<code>str()</code>函数,长度为n位(n小于实际长度时,按实际长度输出),+表示右对齐(默认,可省略),-(左对齐).<br>例:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%c%8s%2c&#x27;</span> % (<span class="number">65</span>, <span class="string">&#x27;python&#x27;</span>, <span class="number">66</span>))  <span class="comment">#--&gt;A  python B</span></span><br></pre></td></tr></table></figure></li><li><code>%[[+/-]n]r</code>:输出表达式,等价于<code>repr()</code>函数,长度为n位(n小于实际长度时,按实际长度输出),+表示右对齐(默认,可省略),-(左对齐).<br>例:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%r*%r*%r&#x27;</span> % (<span class="number">65</span>, <span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;B&#x27;</span>))  <span class="comment">#--&gt;65*&#x27;python&#x27;*&#x27;B&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%r%r%r&#x27;</span> % (<span class="number">65</span>, <span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;x*y&#x27;</span>))  <span class="comment">#--&gt;65&#x27;python&#x27;&#x27;x*y&#x27;</span></span><br></pre></td></tr></table></figure></li><li><code>%[[+/-]n]d</code>、<code>%[[+/-]n]i</code>、<code>%[[+/-]n]u</code>:输出十进制整数,长度为n位(n小于实际长度时,按实际长度输出),+表示右对齐(默认,可省略),-(左对齐).<br>例:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%c%8d%8i%8u%8c&#x27;</span> % (<span class="number">65</span>, <span class="number">12.34</span>, <span class="number">12.34</span>, <span class="number">12.34</span>, <span class="number">66</span>))  <span class="comment">#--&gt;print(&#x27;%c%8d%8i%8u%8c&#x27; % (65, 12.34, 12.34, 12.34, 66))</span></span><br></pre></td></tr></table></figure></li><li><code>%[[+/-]n]o</code>:输出八进制整数,长度为n位(n小于实际长度时,按实际长度输出),+表示右对齐(默认,可省略),-(左对齐).<br>例:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%o&#x27;</span> % <span class="number">22</span>)  <span class="comment">#--&gt;26</span></span><br></pre></td></tr></table></figure></li><li><code>%[[+/-]n]x</code>、<code>%[[+/-]n]X</code>:输出八进制整数,长度为n位(n小于实际长度时,按实际长度输出),+表示右对齐(默认,可省略),-(左对齐).<br>例:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%x%5X&#x27;</span> % (<span class="number">64</span>, <span class="number">64</span>))  <span class="comment">#--&gt;40   40</span></span><br></pre></td></tr></table></figure></li><li><code>%[[+/-]n.m]e</code>、<code>%[[+/-]n.m]E</code>:输出实数,长度为n位(n小于实际长度时,按实际长度输出),m为小数位数,+表示右对齐(默认,可省略),-(左对齐).<br>例:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%e%20.1E&#x27;</span> % (<span class="number">64</span>, <span class="number">64.58</span>))  <span class="comment">#--&gt;6.400000e+01             6.5E+01</span></span><br></pre></td></tr></table></figure></li><li><code>%[[+/-]n.m]f</code>、<code>%[[+/-]n.m]F</code>:输出实数,采用科学计数,长度为n位(n小于实际长度时,按实际长度输出),m为小数位数,+表示右对齐(默认,可省略),-(左对齐).<br>例:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%f%20.1F&#x27;</span> % (<span class="number">64</span>, <span class="number">64.58</span>))  <span class="comment">#--&gt;64.000000                64.6</span></span><br></pre></td></tr></table></figure></li><li><code>%[[+/-]n.m]g</code>、<code>%[[+/-]n.m]G</code>:输出实数,根据数据大小采用e(E)或f(F),长度为n位(n小于实际长度时,按实际长度输出),m为小数位数,+表示右对齐(默认,可省略),-(左对齐).<br>例:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%g%20.8G&#x27;</span> % (<span class="number">64</span>, <span class="number">64.58</span>))  <span class="comment">#--&gt;64               6E+01</span></span><br></pre></td></tr></table></figure></li><li><code>%Y</code>、<code>%m</code>、<code>%d</code>、<code>%H</code>、<code>%M</code>、<code>%s</code>:输出年月日时分秒.<br>例:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="built_in">print</span>(time.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>, time.localtime(time.time())))  <span class="comment">#--&gt;2022-08-17 21:14:22 </span></span><br></pre></td></tr></table></figure><h3 id="format-格式化输出"><a href="#format-格式化输出" class="headerlink" title="format()格式化输出"></a>format()格式化输出</h3></li><li>format()函数的一般格式为:<code>format(表达式[,格式化字符串])</code><br>格式化字符串:</li></ol><ul><li>[n]c –&gt; ASCII值的字符</li><li>%    –&gt; 百分号</li><li>d&#x2F;b&#x2F;o&#x2F;x&#x2F;X –&gt; 十、二、八、十六进制整数</li><li>f&#x2F;F –&gt; 实数(科学计数法)</li><li>e&#x2F;E –&gt; 实数(定点小数)</li><li>填充字符(&#x3D;: 填充字符位于符号和数字之间;&lt;左对齐,&gt;右对齐,^居中)</li><li>省略格式字符串 –&gt; 等价于str(表达式)<br>例:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">format</span>(<span class="number">65</span>, <span class="string">&#x27;^5c&#x27;</span>))   <span class="comment">#--&gt;  A  </span></span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li><code>格式化字符串.format(表达式1,...,表达式n)</code></li></ol><ul><li>格式字符串:包括普通字符和格式字符</li><li>普通字符:按照原样输出</li><li>格式字符的格式:<code>&#123;[序号/键[: ][格式字符]]&#125;</code>序号(0,1,2…)表示格式顺序(可写可不写,可颠倒顺序),键用于指向该键的数据.格式字符与<code>format()</code>类似<br>例:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello,&#123;&#125;,&#123;&#125;,&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">88</span>, <span class="number">65.3</span>, <span class="string">&#x27;你好&#x27;</span>)) <span class="comment">#--&gt; hello,88,65.3,你好</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello,&#123;x&#125;,&#123;y&#125;,&#123;z&#125;&#x27;</span>.<span class="built_in">format</span>(x=<span class="number">88</span>, y=<span class="number">65.3</span>, z=<span class="string">&#x27;你好&#x27;</span>)) <span class="comment">#--&gt; hello,88,65.3,你好</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello,&#123;:c&#125;,&#123;:f&#125;,&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">88</span>, <span class="number">65.3</span>, <span class="string">&#x27;你好&#x27;</span>)) <span class="comment">#--&gt; hello,X,65.300000,你好</span></span><br></pre></td></tr></table></figure><h3 id="格式化输出f’’"><a href="#格式化输出f’’" class="headerlink" title="格式化输出f’’"></a>格式化输出f’’</h3>python3.6以后可以支持 <code>f&#39;&#123;格式字符串:[格式字符]&#125;&#39;</code><br>例:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;abc<span class="subst">&#123;<span class="number">88</span>:7c&#125;</span><span class="subst">&#123;<span class="number">68.123</span>:15e&#125;</span>&#x27;</span>)  <span class="comment">#--&gt; abc      X   6.812300e+01</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;标准输入&quot;&gt;&lt;a href=&quot;#标准输入&quot; class=&quot;headerlink&quot; title=&quot;标准输入&quot;&gt;&lt;/a&gt;标准输入&lt;/h1&gt;&lt;p&gt;&lt;code&gt;input()&lt;/code&gt;函数被称为格式输入语言,即按照用户指定的格式从键盘把数据输入到指定变量中&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="基础" scheme="http://example.com/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="语言基础" scheme="http://example.com/tags/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>版本控制Git远程常用命令</title>
    <link href="http://example.com/2022/05/22/git%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://example.com/2022/05/22/git%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2022-05-22T13:19:31.000Z</published>
    <updated>2022-05-24T09:33:18.377Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初始化远程仓库"><a href="#初始化远程仓库" class="headerlink" title="初始化远程仓库"></a>初始化远程仓库</h2><h4 id="克隆版本库"><a href="#克隆版本库" class="headerlink" title="克隆版本库"></a>克隆版本库</h4><p><code>git clone &lt; url &gt;</code></p><h4 id="添加远程版本库的别名"><a href="#添加远程版本库的别名" class="headerlink" title="添加远程版本库的别名"></a>添加远程版本库的别名</h4><p><code>git remote add &lt;别名&gt;&lt; url &gt;</code></p><h4 id="删除远程版本库的别名"><a href="#删除远程版本库的别名" class="headerlink" title="删除远程版本库的别名"></a>删除远程版本库的别名</h4><p><code>git remote rm &lt;别名&gt;</code></p><h4 id="创建一个无本地分支的库"><a href="#创建一个无本地分支的库" class="headerlink" title="创建一个无本地分支的库"></a>创建一个无本地分支的库</h4><p><code>git init -bare</code></p><span id="more"></span><h2 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h2><h4 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h4><p>列出远程分支: <code>git branch -r</code><br>删除远程库中不存在的分支: <code>git rremote prune origin</code></p><h4 id="获取远程库"><a href="#获取远程库" class="headerlink" title="获取远程库"></a>获取远程库</h4><p>获取但是不合并: <code>git fetch &lt;远程版本库&gt;</code><br>获取并合并到当前本地分支: <code>git pull</code>或者<code>git pull &lt;远程仓库&gt;&lt;远程仓库分支&gt;</code></p><h4 id="推送远程库"><a href="#推送远程库" class="headerlink" title="推送远程库"></a>推送远程库</h4><p><code>git push &lt;远程仓库&gt;&lt;远程分支&gt;</code></p><h4 id="关联远程分支"><a href="#关联远程分支" class="headerlink" title="关联远程分支"></a>关联远程分支</h4><p>branch关联: <code>git branch -u &lt;远程仓库&gt;&lt;分支&gt;</code><br>push关联: <code>git push &lt;远程仓库&gt;&lt;分支&gt;</code></p><h4 id="展示本地仓库关联远程仓库详情"><a href="#展示本地仓库关联远程仓库详情" class="headerlink" title="展示本地仓库关联远程仓库详情:"></a>展示本地仓库关联远程仓库详情:</h4><p><code>git branch -vv</code></p><h4 id="从远程分支创建并切换到本地"><a href="#从远程分支创建并切换到本地" class="headerlink" title="从远程分支创建并切换到本地:"></a>从远程分支创建并切换到本地:</h4><p><code>git chekout -b &lt;分支&gt;&lt;远程仓库&gt;/&lt;分支&gt;</code></p><h4 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h4><p><code>git push origin --delete &lt;remote-分支&gt;</code></p><h4 id="修改远程仓库的url"><a href="#修改远程仓库的url" class="headerlink" title="修改远程仓库的url"></a>修改远程仓库的url</h4><p><code>git remote set-url origin &lt;URL&gt;</code></p><h4 id="展示忽略的文件"><a href="#展示忽略的文件" class="headerlink" title="展示忽略的文件"></a>展示忽略的文件</h4><p><code>git ststus --ignored</code></p><h4 id="强制推送"><a href="#强制推送" class="headerlink" title="强制推送"></a>强制推送</h4><p><code>git push -f &lt;远程仓库&gt;&lt;分支&gt;</code> </p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;初始化远程仓库&quot;&gt;&lt;a href=&quot;#初始化远程仓库&quot; class=&quot;headerlink&quot; title=&quot;初始化远程仓库&quot;&gt;&lt;/a&gt;初始化远程仓库&lt;/h2&gt;&lt;h4 id=&quot;克隆版本库&quot;&gt;&lt;a href=&quot;#克隆版本库&quot; class=&quot;headerlink&quot; title=&quot;克隆版本库&quot;&gt;&lt;/a&gt;克隆版本库&lt;/h4&gt;&lt;p&gt;&lt;code&gt;git clone &amp;lt; url &amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;添加远程版本库的别名&quot;&gt;&lt;a href=&quot;#添加远程版本库的别名&quot; class=&quot;headerlink&quot; title=&quot;添加远程版本库的别名&quot;&gt;&lt;/a&gt;添加远程版本库的别名&lt;/h4&gt;&lt;p&gt;&lt;code&gt;git remote add &amp;lt;别名&amp;gt;&amp;lt; url &amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;删除远程版本库的别名&quot;&gt;&lt;a href=&quot;#删除远程版本库的别名&quot; class=&quot;headerlink&quot; title=&quot;删除远程版本库的别名&quot;&gt;&lt;/a&gt;删除远程版本库的别名&lt;/h4&gt;&lt;p&gt;&lt;code&gt;git remote rm &amp;lt;别名&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;创建一个无本地分支的库&quot;&gt;&lt;a href=&quot;#创建一个无本地分支的库&quot; class=&quot;headerlink&quot; title=&quot;创建一个无本地分支的库&quot;&gt;&lt;/a&gt;创建一个无本地分支的库&lt;/h4&gt;&lt;p&gt;&lt;code&gt;git init -bare&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="工具" scheme="http://example.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="工具" scheme="http://example.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="基础" scheme="http://example.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="Git" scheme="http://example.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>版本控制Git本地常用命令</title>
    <link href="http://example.com/2022/05/20/git%E6%9C%AC%E5%9C%B0%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://example.com/2022/05/20/git%E6%9C%AC%E5%9C%B0%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2022-05-20T13:19:31.000Z</published>
    <updated>2022-05-22T06:03:15.874Z</updated>
    
    <content type="html"><![CDATA[<h2 id="配置git身份信息"><a href="#配置git身份信息" class="headerlink" title="配置git身份信息"></a>配置git身份信息</h2><span id="more"></span><h4 id="添加-x2F-修改用户名信息"><a href="#添加-x2F-修改用户名信息" class="headerlink" title="添加&#x2F;修改用户名信息"></a>添加&#x2F;修改用户名信息</h4><p><code>git config --globa user.name &quot;用户名&quot;</code></p><h4 id="添加-x2F-修改用户邮箱"><a href="#添加-x2F-修改用户邮箱" class="headerlink" title="添加&#x2F;修改用户邮箱"></a>添加&#x2F;修改用户邮箱</h4><p><code>git config --globa user.email &quot;邮箱&quot; </code></p><h4 id="查看用户所有信息"><a href="#查看用户所有信息" class="headerlink" title="查看用户所有信息"></a>查看用户所有信息</h4><p><code>git config -l</code></p><h4 id="查看用户名"><a href="#查看用户名" class="headerlink" title="查看用户名"></a>查看用户名</h4><p><code>git config --globa user.name </code></p><h4 id="查看用户邮箱"><a href="#查看用户邮箱" class="headerlink" title="查看用户邮箱"></a>查看用户邮箱</h4><p><code>git config --globa user.email </code></p><h2 id="初始化本地仓库"><a href="#初始化本地仓库" class="headerlink" title="初始化本地仓库"></a>初始化本地仓库</h2><p>在本地创建一个文件夹作为仓库,在仓库内运行git bash进入命令行</p><h4 id="git-init初始化仓库"><a href="#git-init初始化仓库" class="headerlink" title="git init初始化仓库"></a><code>git init</code>初始化仓库</h4><p>在仓库里会出现一个.git隐藏文件,在这个文件中包含了该仓库的所有信息</p><h2 id="本地仓库操作"><a href="#本地仓库操作" class="headerlink" title="本地仓库操作"></a>本地仓库操作</h2><p>本地仓库分为工作区,暂存区,仓库三部分.在工作区完成后需要将修改后的文件放到暂存区,没有问题的话在提交到本地仓库</p><h4 id="查看当前仓库的工作区状态"><a href="#查看当前仓库的工作区状态" class="headerlink" title="查看当前仓库的工作区状态"></a>查看当前仓库的工作区状态</h4><p><code>git status</code></p><h4 id="将工作区的文件添加到暂存区"><a href="#将工作区的文件添加到暂存区" class="headerlink" title="将工作区的文件添加到暂存区"></a>将工作区的文件添加到暂存区</h4><p>添加单个文件: <code>git add &quot;文件&quot;</code><br>添加所有文件: <code>git add .</code><br>添加某一类型文件: <code>git add *.txt</code></p><h4 id="提交到本地仓库"><a href="#提交到本地仓库" class="headerlink" title="提交到本地仓库"></a>提交到本地仓库</h4><p><code>git commit -m &quot;提交说明信息&quot;</code></p><h4 id="撤销操作"><a href="#撤销操作" class="headerlink" title="撤销操作"></a>撤销操作</h4><p>撤销添加到暂存区: <code>git reset head</code></p><p>撤销提交到仓库: <code>git reset --mixed head^版本 </code><br>    <code>--mixed</code>:不删除代码改动,撤销提交和暂存 .<br><code>--soft</code>:不删除代码改动,不撤销暂存,撤销提交.<br><code>--hard</code>:删除代码改动,撤销提交和暂存 .</p><h2 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h2><p>分支可以帮助我们在不对原来代码影响的情况下进行操作,操作之后可以再进行合并进行修改</p><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支:"></a>创建分支:</h4><p><code>git branch &quot; 分支名称&quot;</code></p><h4 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支:"></a>查看分支:</h4><p>查看本地分支:<code>git branch </code><br>查看所有分支: <code>git branch -a</code></p><h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支:"></a>切换分支:</h4><p><code>git checkout &#39;分支&#39;</code></p><h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支:"></a>合并分支:</h4><p><code>git merge &#39;分支&#39;</code>产生合并冲突时,将冲突部分进行合并即可</p><h4 id="重命名分支"><a href="#重命名分支" class="headerlink" title="重命名分支:"></a>重命名分支:</h4><p>不覆盖已存在同名分支:<code>git branch -m &#39;旧&#39;&#39;新&#39;</code><br>覆盖已存在同名分支:<code>git branch -M &#39;旧&#39;&#39;新&#39;</code></p><h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支:"></a>删除分支:</h4><p>没有合并不会删除: <code>git branch -d &quot;分支名称&quot;</code><br>强制删除: <code>git branch -D &quot;分支名称&quot;</code></p><h2 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h2><h4 id="查看当前状态"><a href="#查看当前状态" class="headerlink" title="查看当前状态:"></a>查看当前状态:</h4><p><code>git status</code></p><h4 id="查看历史记录"><a href="#查看历史记录" class="headerlink" title="查看历史记录:"></a>查看历史记录:</h4><p><code>git log</code><br>查看分支历史记录: <code>gitk &lt;分支&gt;</code></p><h4 id="每个分支最后的提交"><a href="#每个分支最后的提交" class="headerlink" title="每个分支最后的提交:"></a>每个分支最后的提交:</h4><p><code>git branch -v</code></p><h2 id="下一篇文章分享git的远程仓库"><a href="#下一篇文章分享git的远程仓库" class="headerlink" title="下一篇文章分享git的远程仓库"></a>下一篇文章分享git的远程仓库</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;配置git身份信息&quot;&gt;&lt;a href=&quot;#配置git身份信息&quot; class=&quot;headerlink&quot; title=&quot;配置git身份信息&quot;&gt;&lt;/a&gt;配置git身份信息&lt;/h2&gt;</summary>
    
    
    
    <category term="工具" scheme="http://example.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="工具" scheme="http://example.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="基础" scheme="http://example.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="Git" scheme="http://example.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>使用MarkDown编写文档</title>
    <link href="http://example.com/2022/05/14/markdown%E8%AF%AD%E6%B3%95/"/>
    <id>http://example.com/2022/05/14/markdown%E8%AF%AD%E6%B3%95/</id>
    <published>2022-05-14T13:19:31.000Z</published>
    <updated>2022-05-15T08:35:06.807Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Markdown是一种轻量级标记语言，排版语法简洁，让人们更多地关注内容本身而非排版。它使用易读易写的纯文本格式编写文档，可与HTML混编，可导出 HTML、PDF 以及本身的 .md 格式的文件。因简洁、高效、易读、易写，Markdown被大量使用。</p><p>千万不要被「标记」、「语言」吓到，Markdown的语法十分简单，常用的标记符号不超过十 个，用于日常写作记录绰绰有余，不到半小时就能完全掌握。</p><span id="more"></span><h2 id="编辑工具："><a href="#编辑工具：" class="headerlink" title="编辑工具："></a>编辑工具：</h2><p>推荐使用pycharm或者VS code,他们完全可以满足我们日常查看和编辑md文件。不必下载那么多软件，只需要在我们日常编辑器里下载markdown的插件即可</p><h2 id="语法介绍："><a href="#语法介绍：" class="headerlink" title="语法介绍："></a>语法介绍：</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题:"></a>标题:</h3><p>直接在标题前加’#’就可以,几个#代表几级标题。在”#”与标题中间记得加空格。<br>例如:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">###### 六级标题</span></span><br></pre></td></tr></table></figure><hr><h3 id="字体"><a href="#字体" class="headerlink" title="字体:"></a>字体:</h3><h4 id="加粗"><a href="#加粗" class="headerlink" title="加粗:"></a>加粗:</h4><p>用<code>**加粗字体**</code>来加粗文字。</p><h4 id="斜体"><a href="#斜体" class="headerlink" title="斜体:"></a>斜体:</h4><p>用<code>*倾斜字体*</code>使文字倾斜。</p><h4 id="倾斜加加粗"><a href="#倾斜加加粗" class="headerlink" title="倾斜加加粗:"></a>倾斜加加粗:</h4><p>用<code>***倾斜加加粗***</code>对文字进行加粗和倾斜。</p><h4 id="删除线"><a href="#删除线" class="headerlink" title="删除线:"></a>删除线:</h4><p>使用<code>~~删除字体~~</code> 给文字添加删除线。</p><h4 id="高亮："><a href="#高亮：" class="headerlink" title="高亮："></a>高亮：</h4><p>使用<code>反引号</code>对文字进行高亮。<br>例如:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**加粗字体**</span></span><br><span class="line"><span class="emphasis">*倾斜字体*</span></span><br><span class="line"><span class="strong">**<span class="emphasis">*倾斜加加粗*</span>**</span></span><br><span class="line">~~删除字体~~</span><br><span class="line"><span class="code">`高亮字体`</span></span><br></pre></td></tr></table></figure><p>效果:<br><strong>加粗字体</strong></p><p><em>倾斜字体</em></p><p><em><strong>倾斜加加粗</strong></em></p><p><del>删除字体</del></p><p><code>高亮字体</code></p><hr><h3 id="列表"><a href="#列表" class="headerlink" title="列表:"></a>列表:</h3><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表:"></a>有序列表:</h4><p>在数字以及符号<code>.</code>后面加空格，然后输入文本内容，</p><p>例如:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 有序列表</span><br><span class="line"><span class="bullet">2.</span> 有序列表</span><br><span class="line"><span class="bullet">    -</span> 子级无序列表</span><br><span class="line"><span class="bullet">    -</span> 子级无序列表</span><br><span class="line"><span class="bullet">3.</span> 有序列表</span><br><span class="line"><span class="bullet">    1.</span> 子级有序列表</span><br></pre></td></tr></table></figure><p>效果:</p><ol><li>有序列表</li><li>有序列表<ul><li>子级无序列表</li><li>子级无序列表</li></ul></li><li>有序列表<ol><li>子级有序列表<h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表:"></a>无序列表:</h4>直接在文本前面加<code>-</code>然后加空格就行。子级无序列表<code>-</code>前加四个空格，相对于上一级</li></ol></li></ol><p>例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 无序列表</span><br><span class="line"><span class="bullet">-</span> 无序列表</span><br><span class="line"><span class="bullet">-</span> 无序列表</span><br><span class="line"><span class="bullet">    -</span> 子级无序列表</span><br></pre></td></tr></table></figure><p>效果:</p><ul><li>无序列表</li><li>无序列表</li><li>无序列表<ul><li>子级无序列表</li></ul></li></ul><hr><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线:"></a>分割线:</h3><p>使用三个或者三个以上的<code>---</code>或者<code>***</code>可以产生分割线，不过与上一段文本空一行。</p><hr><h3 id="引用："><a href="#引用：" class="headerlink" title="引用："></a>引用：</h3><p>在符号<code>&gt;</code>后面加文本内容，该内容会以引用的方式呈现。</p><p>例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 这是一段引用的文本</span></span><br><span class="line">&gt;&gt; 这是引用中的引用</span><br><span class="line">&gt;&gt;&gt;这是引用中的引用的引用</span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; 这是另一个引用，和上面的引用要空一行</span></span><br></pre></td></tr></table></figure><p>效果:</p><blockquote><p>这是一段引用的文本</p><blockquote><p>这是引用中的引用</p><blockquote><p>这是引用中的引用的引用</p></blockquote></blockquote></blockquote><blockquote><p>这是另一个引用，和上面的引用要空一行</p></blockquote><hr><h3 id="链接"><a href="#链接" class="headerlink" title="链接:"></a>链接:</h3><p>可以在直接写链接如: <a href="http://www.baidu.com,会直接显示,只显示链接文本的话用反引号将链接包裹./">www.baidu.com,会直接显示,只显示链接文本的话用反引号将链接包裹。</a><br>在文本中插入链接可以使用<code>[文本](链接)</code>的方式:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">百度</span>](<span class="link">www.baidu.com</span>)</span><br></pre></td></tr></table></figure><p>效果:<br><a href="www.baidu.com">百度</a></p><hr><h3 id="图片："><a href="#图片：" class="headerlink" title="图片："></a>图片：</h3><p>支持本地图片和线上图片。格式是：<code>![图片描述](图片地址)</code>。</p><p>例如：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![图片](https:<span class="regexp">//</span>w.wallhaven.cc<span class="regexp">/full/g</span>7/wallhaven-g7kg83.jpg)</span><br></pre></td></tr></table></figure><p>效果:<br><img src="https://w.wallhaven.cc/full/g7/wallhaven-g7kg83.jpg" alt="图片"></p><hr><h3 id="表格"><a href="#表格" class="headerlink" title="表格:"></a>表格:</h3><p>我们可以在markdown里面添加表格，并可以设定文字的对齐方式，</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|表头1|表头2|表头3|</span><br><span class="line">|:----|:----:|----:|</span><br><span class="line">|内容1|内容2|内容3|</span><br></pre></td></tr></table></figure><p>注意点：</p><ul><li>第二行中要<code>四个短横杠</code>  </li><li>第二行的<code>冒号</code>，可以规定对齐方式，在短横杠的左边就是左对齐，在右边就是右对齐，两个冒号就是居中</li><li>每一行必须要有相同多个<code>|</code></li></ul><p>效果：</p><table><thead><tr><th align="left">表头1</th><th align="center">表头2</th><th align="right">表头3</th></tr></thead><tbody><tr><td align="left">内容1</td><td align="center">内容2</td><td align="right">内容3</td></tr></tbody></table><hr><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块:"></a>代码块:</h3><p>使用两个&#96;&#96;&#96;来包裹代码文本,</p><p>整个代码的区块要特别的标识出来，并且代码要支持高亮等要在第一个&#96;&#96;&#96;后面加上对应的语言。<br>例如:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">```python</span></span><br><span class="line"><span class="code">print(&#x27;hello world&#x27;)</span></span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">效果:</span><br><span class="line">```python</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&#x27;hello world&#x27;</span>)</span></span></span><br></pre></td></tr></table></figure><hr><h3 id="内嵌HTML"><a href="#内嵌HTML" class="headerlink" title="内嵌HTML"></a>内嵌HTML</h3><p>如果你还想要更加复杂的样式，可以在markdown中嵌入HTML代码。<br>例如：  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;display:iline;text-align:right;color:blue;&quot;</span>&gt;</span></span>蓝色居左<span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;display:block;text-align:right;color:red;&quot;</span>&gt;</span></span>红色居右<span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;display:block;text-align:center;color:red;&quot;</span>&gt;</span></span>绿色居中<span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><span style="display:iline;text-align:right;color:blue;">蓝色居左</span><br><span style="display:block;text-align:right;color:red;">红色居右</span><br><span style="display:block;text-align:center;color:green;">绿色居中</span></p><hr><p><code>emmmm,平常用到的markdown语法也就这么多,如果想了解更多留下评论.</code><br>                  <code>正在python道路上越走越远的up</code></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Markdown是一种轻量级标记语言，排版语法简洁，让人们更多地关注内容本身而非排版。它使用易读易写的纯文本格式编写文档，可与HTML混编，可导出 HTML、PDF 以及本身的 .md 格式的文件。因简洁、高效、易读、易写，Markdown被大量使用。&lt;/p&gt;
&lt;p&gt;千万不要被「标记」、「语言」吓到，Markdown的语法十分简单，常用的标记符号不超过十 个，用于日常写作记录绰绰有余，不到半小时就能完全掌握。&lt;/p&gt;</summary>
    
    
    
    <category term="工具" scheme="http://example.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="工具" scheme="http://example.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="基础" scheme="http://example.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="MarkDown" scheme="http://example.com/tags/MarkDown/"/>
    
  </entry>
  
</feed>
